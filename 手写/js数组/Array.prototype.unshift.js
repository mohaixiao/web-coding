Array.prototype.myUnshift = function (...items) {
    // 将 items 数组的元素添加到数组开头
    for (let i = items.length - 1; i >= 0; i--) {
        this.splice(0, 0, items[i]);
    }
    // 返回新数组的长度
    return this.length;
}


// 在上述代码中，定义了一个新的方法 myUnshift()，它接受一个或多个参数作为要添加的元素。首先，使用 ES6 的扩展运算符 ...将参数转换为数组形式，并存储在变量 items 中。然后，使用 for 循环遍历 items 数组中的元素，依次将它们添加到数组的开头，使用 splice() 方法实现该操作，其中第一个参数 0 表示开始添加的位置，第二个参数 0 表示删除数量为 0，即不删除任何元素。最后，返回新数组的长度，即为添加元素后的数组长度。

// 该实现与 Array.prototype.unshift() 的原生实现类似，只是关键实现细节略有不同。需要注意的是，该方法不会改变原始数组，而是返回一个新的数组，因此可以安全地在调用该方法时传递一个数组对象作为参数。此外，由于该方法可能会影响到数组的长度，因此在添加元素时需要倒序遍历 items 数组，并使用 splice() 方法将元素添加到数组开头。